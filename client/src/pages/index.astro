---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import "video.js/dist/video-js.css";
---

<Layout title="CLICA AQUI SARA">
  <main>
    <h1>Ola <span class="text-gradient">Sara</span></h1>

    <h2 id="peer-id">My Peer ID:</h2>

    <div class="peer-input">
      <h2>Server ID:</h2>
      <span contenteditable="true" id="remote-peer-id"></span>
      <button id="connect-btn">Connect</button>
    </div>

    <video autoplay controls class="video-js"></video>
  </main>
</Layout>

<script>
  import Peer from "peerjs";

  const peerID = document.getElementById("peer-id");
  const peer = new Peer();

  peer.on("open", (id) => {
    peerID!.textContent = `My Peer ID: ${id}`;
  });

  const remotePeerID = document.getElementById(
    "remote-peer-id"
  ) as HTMLInputElement;

  const connectButton = document.getElementById(
    "connect-btn"
  ) as HTMLButtonElement;

  connectButton.addEventListener("click", () => {
    console.log(remotePeerID.innerText);
    const conn = peer.connect(remotePeerID.innerText);
  });

  peer.on("call", (call) => {
    call.answer();
    call.on("stream", (remoteStream) => {
      const video = document.querySelector("video") as HTMLVideoElement;
      video.srcObject = remoteStream;
      video.play();
    });
  });
</script>

<style>
  span[contenteditable="true"] {
    font-size: 1.5rem;
    font-weight: 700;

    padding: 0.5rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    border-radius: 8px;

    width: 100%;
    height: 100%;
  }
  .peer-input {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .peer-input h2 {
    margin-right: 1rem;
    height: 100%;
  }

  .peer-input button {
    height: 100%;
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    border: 1px solid rgba(var(--accent-light), 25%);
    border-radius: 8px;
    color: white;
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;

    margin-left: 1rem;
  }

  .peer-input button:hover {
    background: linear-gradient(
      rgba(var(--accent-dark), 33%),
      rgba(var(--accent-dark), 66%)
    );
  }

  .peer-input input {
    font-size: 1rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    border-radius: 8px;

    padding: 0.1rem;
  }
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
  video {
    width: 100%;
    height: auto;
    border-radius: 8px;
  }
</style>
