---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Sharer">
  <main>
    <h1>Welcome to <span class="text-gradient">A tua mae</span></h1>

    <h2 id="peer-id">My Peer ID:</h2>

    <div class="peer-input">
      <h2>Other Peer ID:</h2>
      <input type="text" id="remote-peer-id" />
    </div>

    <button id="main-btn">Start Screen Sharing!</button>
  </main>
</Layout>

<script>
  import Peer from "peerjs";

  const peer = new Peer();

  const peerId = document.getElementById("peer-id");
  peer.on("open", (id) => {
    peerId!.textContent = `My Peer ID: ${id}`;
  });

  let peers;

  peer.on("connection", (conn) => {
    conn.on("data", (data) => {
      console.log(data);
    });

    conn.on("open", () => {
      conn.send("Hello!");
    });
  });

  peer.on("call", (call) => {
    call.answer();

    call.on("stream", (stream) => {
      const video = document.createElement("video");
      video.srcObject = stream;
      video.autoplay = true;
      document.body.appendChild(video);
    });
  });

  //   const remotePeerId = document.getElementById(
  //     "remote-peer-id"
  //   ) as HTMLInputElement;

  //   remotePeerId.addEventListener("change", (e) => {
  //     const conn = peer.connect(remotePeerId.value);
  //   });

  //   const btn = document.getElementById("main-btn");
  //   btn!.addEventListener("click", async () => {
  //     const stream = await navigator.mediaDevices.getUserMedia({
  //       video: true,
  //       audio: true,
  //     });

  //     const call = peer.call("remote-peer-id", stream);

  //     const video = document.createElement("video");
  //     video.srcObject = stream;
  //     video.autoplay = true;
  //     document.body.appendChild(video);
  //   });
</script>

<style>
  .peer-input {
    display: flex;

    margin-bottom: 1rem;
  }

  .peer-input h2 {
    margin-right: 1rem;
  }

  .peer-input input {
    font-size: 1rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    border-radius: 8px;

    padding: 0.1rem;
  }

  button {
    padding: 1rem 2rem;
    font-size: 1.2rem;
    background: linear-gradient(
      90deg,
      rgba(var(--accent-light), 33%),
      rgba(var(--accent-dark), 66%)
    );
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: transform 0.2s;

    display: block;
    margin: 0 auto;
  }
  button:hover {
    transform: scale(1.05);
  }

  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
